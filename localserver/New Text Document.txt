@app.route('/cut', methods=['POST'])
def save():
    start = time.time()
    logger.info("CUT in progress")

    if 'data' not in request.files: 
        return jsonify({
            'status' : 'error',
            'error' : 'missing files parameter as data'
        }), 400

    data = request.files['data'].read()
    if len(data) == 0:
        return jsonify({
            'status' : 'error',
            'error' : 'empty image'
        }), 400

    with open('cut_received.jpg','wb') as f:
        f.write(data)
    
    logger.info('Sending to BasNet')
    
    header={}
    files = {'data' : open('cut_received.jpg' , 'rb')}

    res = request.post(basnet_service, headers=header, files=files)

    logger.info("Saving Results")
    with open('cut_mask.png' , 'wb') as f:
        f.write(res.content)

    logger.info('Opening Mask')
    mask = Image.open('cut_mask.png'.convert("L").resize((256,256)),resample=Image.BICUBIC, reducing_gap=2.0)

    logger.info('composing final Image')
    ref = Image.open(io.BytesIO(data))
    empty = Image.new("RGBA",ref.size,0)
    img = Image.composite(ref,empty,mask)

    img_scaled = img.resize((img.size[0] * 3, img.size[1] * 3))


    logging.info(' > saving final image...')
    img_scaled.save('cut_current.png')

    #------------------------------------#
    buff = io.BytesIO()
    img.save(buff, 'PNG')
    buff.seek(0)
    #------------------------------------#
    logging.info(f'Completed in {time.time() - start}s')

    return send_file(buff,mimetype='img/png')